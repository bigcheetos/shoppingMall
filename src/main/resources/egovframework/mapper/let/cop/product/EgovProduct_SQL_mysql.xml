<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ProductDAO">
	
	<select id="selectProductListAll" resultMap="ProductResultMap">
			SELECT 
				PRODUCT_ID,
				STOCK_ID,
				PRODUCT_NAME,
				PRODUCT_SUMMARY,
				PRODUCT_PRICE,
				PRODUCT_DISCOUNT_PRICE,
				PRODUCT_ORIGIN,
				PRODUCT_DELIVERYPAY,
				PRODUCT_STATUS,
				PRODUCT_RDCNT,
				PRODUCT_BESTCNT,
				PRODUCT_REGID,
				PRODUCT_UPDID,
				PRODUCT_REGDATE,
				PRODUCT_UPDDATE
			FROM
				PRODUCT
	</select>
	
	<select id="selectProductListBySearchVO" resultMap="ProductResultMap" parameterType = "egovframework.sample.common.SearchVO">
			SELECT 
				A.PRODUCT_ID,
				A.STOCK_ID,
				A.PRODUCT_NAME,
				A.PRODUCT_SUMMARY,
				A.PRODUCT_PRICE,
				A.PRODUCT_DISCOUNT_PRICE,
				A.PRODUCT_ORIGIN,
				A.PRODUCT_DELIVERYPAY,
				A.PRODUCT_STATUS,
				A.PRODUCT_RDCNT,
				A.PRODUCT_BESTCNT,
				A.PRODUCT_REGID,
				A.PRODUCT_UPDID,
				A.PRODUCT_REGDATE,
				A.PRODUCT_UPDDATE
			FROM
				PRODUCT A
			INNER JOIN
				PRODUCT_DETAIL B
			ON	
				A.PRODUCT_ID = B.PRODUCT_ID
			<if test="searchCondition1 != null">
			INNER JOIN
				PRODUCT_DETAIL_TO_PRODUCT_CATEGORY C
			ON
				B.PRODUCT_CODE = C.PRODUCT_CODE
			</if>
			WHERE 
				A.PRODUCT_STATUS = '판매중'
			<if test="searchWord != null">
			AND	A.PRODUCT_NAME LiKE CONCAT('%' , #{searchWord} , '%')
			</if>
			<if test="searchCondition1 != null">
			AND	C.CATEGORY_ID = #{searchCondition1}
			</if>
			<if test="priceOver != null">
			<![CDATA[AND	A.PRODUCT_PRICE >= #{priceOver}]]>
			</if>
			<if test="priceUnder != null">
			<![CDATA[AND	A.PRODUCT_PRICE <= #{priceUnder}]]>
			</if>
			<if test="searchOrder != null">
				<choose>
					<when test="searchOrder == 'discount'">
					ORDER BY PRODUCT_DISCOUNT_PRICE/PRODUCT_PRICE ASC
					</when>
					<when test="searchOrder == 'popular'">
					ORDER BY PRODUCT_RDCNT DESC
					</when>
					<when test="searchOrder == 'new'">
					ORDER BY PRODUCT_REGDATE DESC
					</when>
					<when test="searchOrder == 'name'">
					ORDER BY PRODUCT_NAME ASC
					</when>
					<when test="searchOrder == 'lower-price'">
					ORDER BY PRODUCT_DISCOUNT_PRICE*1 ASC
					</when>
					<when test="searchOrder == 'higher-price'">
					ORDER BY PRODUCT_DISCOUNT_PRICE*1 DESC
					</when>
				</choose>
			</if>
			<if test="searchUnit != null">
			LIMIT #{searchUnit}
			</if>
	</select>
	
	<select id="selectProductByProductId" resultMap="ProductResultMap" >
			SELECT 
				PRODUCT_ID,
				STOCK_ID,
				PRODUCT_NAME,
				PRODUCT_SUMMARY,
				PRODUCT_PRICE,
				PRODUCT_DISCOUNT_PRICE,
				PRODUCT_ORIGIN,
				PRODUCT_DELIVERYPAY,
				PRODUCT_STATUS,
				PRODUCT_RDCNT,
				PRODUCT_BESTCNT,
				PRODUCT_REGID,
				PRODUCT_UPDID,
				PRODUCT_REGDATE,
				PRODUCT_UPDDATE
			FROM
				PRODUCT	
			WHERE
				PRODUCT_ID = #{productId}		
	</select>
	
	<select id="selectNextProductId" resultType="String" >
			SELECT 
				MAX(PRODUCT_ID) + 1
			FROM
				PRODUCT			
	</select>
	
	<insert id="insertProduct">
			INSERT INTO
				PRODUCT
			(
				PRODUCT_ID,
				STOCK_ID,
				PRODUCT_NAME,
				PRODUCT_SUMMARY,
				PRODUCT_PRICE,
				PRODUCT_DISCOUNT_PRICE,
				PRODUCT_ORIGIN,
				PRODUCT_DELIVERYPAY,
				PRODUCT_STATUS,
				PRODUCT_RDCNT,
				PRODUCT_BESTCNT,
				PRODUCT_REGID,
				PRODUCT_UPDID,
				PRODUCT_REGDATE,
				PRODUCT_UPDDATE
			)
			VALUES
			(
				#{productId},
				#{stockId},
				#{productName},
				#{productSummary},
				#{productPrice},
				#{productDiscountPrice},
				#{productOrigin},
				#{productDeliverypay},
				#{productStatus},
				#{productRdcnt},
				#{productBestcnt},
				#{productRegid},
				#{productUpdid},
				now(),
				now()
			)
	</insert>
	
	<update id="updateProduct">
			UPDATE
				PRODUCT
			SET
				STOCK_ID 				= #{stockId},
				PRODUCT_NAME 			= #{productName},
				PRODUCT_SUMMARY 		= #{productSummary},
				PRODUCT_PRICE 			= #{productPrice},
				PRODUCT_DISCOUNT_PRICE  = #{productDiscountPrice},
				PRODUCT_ORIGIN 			= #{productOrigin},
				PRODUCT_DELIVERYPAY 	= #{productDeliverypay},
				PRODUCT_STATUS 			= #{productStatus},
<!-- 				PRODUCT_RDCNT 			= #{productRdcnt},
				PRODUCT_BESTCNT 		= #{productBestcnt}, -->
				PRODUCT_UPDID 			= #{productUpdid},
				PRODUCT_UPDDATE 		= now()
			WHERE
				PRODUCT_ID 				= #{productId}
	</update>
	
	<delete id="deleteProduct">
		DELETE
			FROM PRODUCT
		WHERE
			PRODUCT_ID = #{productId}
	</delete>
	
	<resultMap id="ProductResultMap" type="egovframework.let.cop.product.service.ProductVO">
		<result property="productId" column="PRODUCT_ID"/>
		<result property="stockId" column="STOCK_ID"/>
		<result property="productName" column="PRODUCT_NAME"/>
		<result property="productSummary" column="PRODUCT_SUMMARY"/>
		<result property="productPrice" column="PRODUCT_PRICE"/>
		<result property="productDiscountPrice" column="PRODUCT_DISCOUNT_PRICE"/>
		<result property="productOrigin" column="PRODUCT_ORIGIN"/>
		<result property="productDeliverypay" column="PRODUCT_DELIVERYPAY"/>
		<result property="productStatus" column="PRODUCT_STATUS"/>
		<result property="productRdcnt" column="PRODUCT_RDCNT"/>
		<result property="productBestcnt" column="PRODUCT_BESTCNT"/>
		<result property="productRegid" column="PRODUCT_REGID"/>
		<result property="productUpdid" column="PRODUCT_UPDID"/>
		<result property="productRegdate" column="PRODUCT_REGDATE"/>
		<result property="productUpddate" column="PRODUCT_UPDDATE"/>
	</resultMap>
</mapper>